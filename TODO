# -*- org -*-
* Notes
** Sat Aug 20 15:58:07 PDT 2011
   1. Email from day one: congratulations; good faith estimate of when
      the deposit is in (you have 48 hrs).
   2. 
     
   Lots of calling, email now. Who does the inputting of data? Early
   adopters: tech-savvy agents. Ten or twelve pre-loaded
   items. Perfect world: escrow officer owns the whole piece; reality:
   falls back on agents.

   Listing agent is the show-runner; behooves him to make sure that
   the seller is doing less. As a listing agent, can see what's done
   and timeline maybe once a day. How many calls or email would this
   eliminate? Back and forth every day.

   Know what's been-done, what's yet-to-be-done; six parties: buyer,
   seller, buyer-agent, seller-agent, escrow-officer, ______.

   Don't want the seller to know necessarily that buyer hasn't put the
   deposit in.

   Parties should not have all access. Only see the due dates, but not
   able to do anything. See checklist; but not checked off.

   Seller's interest: good-faith deposity within three days; did it
   come in at value; ...

   Focus on the buyer; lead-gen.
** Sat Aug 20 16:28:03 PDT 2011
   Add to the website? Add as few or as many users as you want?
* TODO Database model
  #+BEGIN_SRC sqlite :tangle project.sql
    PRAGMA foreign_keys = ON;
    
    DROP TABLE IF EXISTS permission;
    CREATE TABLE permission (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           level TEXT
           );
    
    DROP TABLE IF EXISTS role;
    CREATE TABLE role (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           permission_id INTEGER REFERENCES permission(id)
           ON UPDATE CASCADE ON DELETE CASCADE,
           name TEXT
           );
    
    DROP TABLE IF EXISTS person;
    CREATE TABLE person (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           role_id INTEGER REFERENCES role(id)
           ON UPDATE CASCADE ON DELETE CASCADE,
           name TEXT,
           company TEXT,
           phone TEXT,
           email TEXT,
           username TEXT,
           salt TEXT,
           hash TEXT
           );
    
    DROP TABLE IF EXISTS project;
    CREATE TABLE project (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           creator_id INTEGER REFERENCES person(id)
           ON UPDATE CASCADE ON DELETE CASCADE,
           address_1 TEXT,
           address_2 TEXT,
           city TEXT,
           state TEXT,
           zip TEXT
           );
    
    DROP TABLE IF EXISTS task;
    CREATE TABLE task (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           task_type_id INTEGER REFERENCES task_type(id)
           ON UPDATE CASCADE ON DELETE CASCADE,
           project_id INTEGER REFERENCES project(id)
           ON UPDATE CASCADE ON DELETE CASCADE,
           responsible_person_id INTEGER REFERENCES person(id)
           ON UPDATE CASCADE ON DELETE CASCADE,
           due_date TEXT,
           done INTEGER DEFAULT 0,
           other_name TEXT
           );
    
    DROP TABLE IF EXISTS task_type;
    CREATE TABLE task_type (
           id INTEGER PRIMARY KEY AUTOINCREMENT,
           name TEXT,
           description TEXT 
           );
    
    INSERT INTO permission (id, level) VALUES(1, "Administrator");
    INSERT INTO permission (id, level) VALUES(2, "Contributor");
    INSERT INTO permission (id, level) VALUES(3, "User");
    
    INSERT INTO role (id, permission_id, name) VALUES(1, 3, "Buyer");
    INSERT INTO role (id, permission_id, name) VALUES(2, 3, "Seller");
    INSERT INTO role (id, permission_id, name) VALUES(3, 1, "Buyer Agent");
    INSERT INTO role (id, permission_id, name) VALUES(4, 1, "Seller Agent");
    INSERT INTO role (id, permission_id, name) VALUES(5, 1, "Mortgage Broker");
    INSERT INTO role (id, permission_id, name) VALUES(6, 1, "Escrow Agent");
    INSERT INTO role (id, permission_id, name) VALUES(7, 1, "Title Agent");
    INSERT INTO role (id, permission_id, name) VALUES(8, 1, "Other");
    
    INSERT INTO task_type (id, name, description)
           VALUES(1, "Open Escrow", "Date on which the escrow starts.");
    INSERT INTO task_type (id, name, description)
           VALUES(2, "Close Escrow", "Date on which the escrow ends.");
    INSERT INTO task_type (id, name, description)
           VALUES(3, "Appraisal Contingency Date", "Date by which the buyer must get an expert estimate of the value of their new home to opt out of the deal without penalty.");
    INSERT INTO task_type (id, name, description)
           VALUES(4, "Inspection Contingency Date", "Date by which the buyer must get an inspection of their new home to opt out of the deal without penalty.");
    INSERT INTO task_type (id, name, description)
           VALUES(5, "Loan Contingency Date", "Date by which the buyer has to get a loan guarantee from their lending institution to opt out of the deal without penalty.");
    INSERT INTO task_type (id, name, description)
           VALUES(6, "Home Owners Contingency Date", "Date by which the buyer has to obtain a homeowner’s insurance quote (aka “binder”) and forward it to the lender.");
    INSERT INTO task_type (id, name, description)
           VALUES(7, "Buyer Escrow Package Date", "Date by which buyer should provide all relevant personal information to escrow");
    INSERT INTO task_type (id, name, description)
           VALUES(8, "Seller Escrow Package Date", "Date by which the seller needs to provide ther personal information to escrow");
    INSERT INTO task_type (id, name, description)
           VALUES(9, "Buyer Vesting Amendment Date", "Date by which the buyer provides escrow with the legal nature in which he will take title");
    INSERT INTO task_type (id, name, description)
           VALUES(10, "Complete Loan Application Date", "Complete Loan Application Date");
    INSERT INTO task_type (id, name, description)
           VALUES(11, "Final Walkthrough Date", "Date by which the buyer confirms the condition of the property and does their final ""walk through"" with the buyer's agent");
    INSERT INTO task_type (id, name, description)
           VALUES(12, "Verification of Sales Price Date", "Verification of Sales Price Date");
    INSERT INTO task_type (id, name, description)
           VALUES(13, "Finalize Closing Cost Date", "Date by which the buyer has to ");
    INSERT INTO task_type (id, name, description)
           VALUES(14, "Finalize Credits Date", "Date by which the buyer has to ");
    INSERT INTO task_type (id, name, description)
           VALUES(15, "Other Date", "Other Date");
    INSERT INTO task_type (id, name, description)
           VALUES(16, "Good Faith Deposit Date", "Occurs within 72 hours of acceptance of the deal - buyer deposits their money to escrow");
    INSERT INTO task_type (id, name, description)
           VALUES(17, "City Disclosures", "City Disclosures");
    INSERT INTO task_type (id, name, description)
           VALUES(18, "Termite Inspection Date", "Termite Inspection Date");
    INSERT INTO task_type (id, name, description)
           VALUES(19, "Termite Repair Date", "Termite Repair Date");
    
    INSERT INTO person (id, role_id, name, company, phone, email, username)
           VALUES(1, 1, "Ella J. Landry", "NoVacations.com", "479-648-7952", "EllaJLandry@teleworm.com", "ella");
    INSERT INTO person (id, role_id, name, company, phone, email, username)
           VALUES(2, 2, "Ronny G. Rogers", "WallpaperDealer.com", "281-405-3229", "RonnyGRogers@teleworm.com", "ronny");
    INSERT INTO person (id, role_id, name, company, phone, email, username)
           VALUES(3, 3, "Joseph R. Cavitt", "ResidentialIndustry.com", "469-357-1049", "JosephRCavitt@teleworm.com", "joseph");
    INSERT INTO person (id, role_id, name, company, phone, email, username)
           VALUES(4, 4, "Patricia A. Madden", "CounselingMaterials.com", "PatriciaAMadden@teleworm.com", "419-916-7859", "patricia");
    INSERT INTO person (id, role_id, name, company, phone, email, username)
           VALUES(5, 5, "Timothy S. Peters", "RoadSticks.com", "713-309-0478", "TimothySPeters@teleworm.com", "timothy");
    INSERT INTO person (id, role_id, name, company, phone, email, username)
           VALUES(6, 6, "Mary J. Dalton", "FirmPolicy.com", "323-278-4445", "MaryJDalton@teleworm.com", "mary");
    INSERT INTO person (id, role_id, name, company, phone, email, username)
           VALUES(7, 7, "Julie C. Stephenson", "LocalTownhouses.com", "859-229-8849", "JulieCStephenson@teleworm.com", "julie");
    
    INSERT INTO project (creator_id, address_1, address_2, city, state, zip)
           VALUES(6, "234 S Tower Dr #2", "", "Beverly Hills", "CA", "90211");
    INSERT INTO project (creator_id, address_1, address_2, city, state, zip)
           VALUES(6, "3523 Eagle Lane", "", "Grand Forks", "MN", "58203");
    INSERT INTO project (creator_id, address_1, address_2, city, state, zip)
           VALUES(6, "4381 Stout Street", "", "Lancaster", "PA", "17670");
    
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(1, 1, 6, '2011-08-21');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(2, 1, 6, '2011-09-18');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(3, 1, 6, '2011-08-28');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(4, 1, 6, '2011-09-04');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(5, 1, 6, '2011-09-12');
    
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(1, 2, 6, '2011-08-21');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(2, 2, 6, '2011-09-18');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(3, 2, 6, '2011-08-28');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(4, 2, 6, '2011-09-04');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(5, 2, 6, '2011-09-12');
    
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(1, 3, 6, '2011-08-21');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(2, 3, 6, '2011-09-18');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(3, 3, 6, '2011-08-28');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(4, 3, 6, '2011-09-04');
    INSERT INTO task (task_type_id, project_id, responsible_person_id, due_date)
           VALUES(5, 3, 6, '2011-09-12');
    
  #+END_SRC
* TODO Module
  #+BEGIN_SRC scheme :tangle escrowsnap.scm
    (module
     escrowsnap
     (call-with-project-db
      void-if-sql-null)
    
     (import scheme chicken)
    
     (use call-with-sqlite3-connection
          sql-null)
    
     (define (call-with-project-db procedure)
       (call-with-sqlite3-connection
        "project.db"
        procedure))
    
     (define (void-if-sql-null datum)
      (if (sql-null? datum) (void) datum)))
    
  #+END_SRC
* TODO Serve projects.
  For a given persion, all the projects associated with them; for a
  given project, people and tasks associated with it; for a given
  username, role.

  #+BEGIN_SRC scheme :tangle projects-tasks.scm :shebang #!/usr/bin/env chicken-scheme
    (use call-with-sqlite3-connection
         vector-lib
         matchable
         sql-null
         call-with-query
         json)
    
    (require-library sqlite3)
    (import (prefix sqlite3 sqlite3:))
    
    (include "escrowsnap.scm")
    (import escrowsnap)
    
    (call-with-project-db
     (lambda (project-db)
       (call-with-dynamic-fastcgi-query
        (lambda (query)
          (display-content-type-&c. 'json)
          (let ((project-id (query-any query 'project-id)))
            (json-write
             (sqlite3:map-row
              (lambda (task-type-id responsible-person-id due-date done other-name)
                (match-let (((type-name type-description)
                             (sqlite3:first-row project-db "SELECT name, description FROM task_type WHERE id = ?;" task-type-id)))
                  `#((type-id . ,(void-if-sql-null task-type-id))
                     (type-name . ,(void-if-sql-null type-name))
                     (type-description . ,(void-if-sql-null type-description))
                     (responsible-person-id . ,(void-if-sql-null responsible-person-id))
                     (due-date . ,(void-if-sql-null due-date))
                     (done . ,(void-if-sql-null done))
                     (other-name . ,(void-if-sql-null other-name)))))
              project-db
              "SELECT task_type_id, responsible_person_id, due_date, done, other_name FROM task WHERE project_id = ?;"
              project-id)))))))
    
  #+END_SRC

  #+BEGIN_SRC scheme :tangle people-projects.scm :shebang #!/usr/bin/env chicken-scheme
    (use call-with-sqlite3-connection
         vector-lib
         matchable
         sql-null
         call-with-query
         json)
    
    (require-library sqlite3)
    (import (prefix sqlite3 sqlite3:))
    
    (include "escrowsnap.scm")
    (import escrowsnap)
    
    (call-with-project-db
     (lambda (project-db)
       (call-with-dynamic-fastcgi-query
        (lambda (query)
          (display-content-type-&c. 'json)
          (let ((owner-id (query-any query 'owner-id)))
            (json-write
             (sqlite3:map-row
              (lambda (project-id address-1 address-2 city state zip)
                `#((project-id . ,(void-if-sql-null project-id))
                   (address-1 . ,(void-if-sql-null address-1))
                   (address-2 . ,(void-if-sql-null address-2))
                   (city . ,(void-if-sql-null city))
                   (state . ,(void-if-sql-null state))
                   (zip . ,(void-if-sql-null zip))))
              project-db
              "SELECT id, address_1, address_2, city, state, zip FROM project WHERE creator_id = ?;"
              owner-id)))))))
    
  #+END_SRC

  #+BEGIN_SRC scheme :tangle people.scm :shebang #!/usr/bin/env chicken-scheme
    (use call-with-sqlite3-connection
         vector-lib
         matchable
         sql-null
         call-with-query
         json)
    
    (require-library sqlite3)
    (import (prefix sqlite3 sqlite3:))
    
    (include "escrowsnap.scm")
    (import escrowsnap)
    
    (call-with-project-db
     (lambda (project-db)
       (call-with-dynamic-fastcgi-query
        (lambda (query)
          (display-content-type-&c. 'json)
          (let ((username (query-any query 'username)))
            (json-write
             (sqlite3:map-row
              (lambda (role-id name company phone email)
                (match-let*
                    (((permission-id role-name)
                      (sqlite3:first-row
                       project-db
                       "SELECT permission_id, name FROM role WHERE id = ?"
                       role-id))
                     (permission-level
                      (sqlite3:first-result
                       project-db
                       "SELECT level FROM permission WHERE id = ?"
                       permission-id)))
                  `#((name . ,(void-if-sql-null name))
                     (company . ,(void-if-sql-null company))
                     (phone . ,(void-if-sql-null phone))
                     (email . ,(void-if-sql-null email))
                     (role-id . ,(void-if-sql-null role-id))
                     (role-name . ,(void-if-sql-null role-name))
                     (permission-id . ,(void-if-sql-null permission-id))
                     (permission-level . ,(void-if-sql-null permission-level)))))
              project-db
              "SELECT role_id, name, company, phone, email FROM person WHERE username = ?;"
              username)))))))
    
  #+END_SRC

  #+BEGIN_SRC xml :tangle .htaccess
    Options +ExecCGI +FollowSymLinks
    Order allow,deny
    Allow from all
    
    <Files ~ ".scm$">
      SetHandler fastcgi-script
    </Files>
    
    RewriteEngine on
    RewriteRule projects/([^/]+)/tasks projects-tasks.scm?project-id=$1
    RewriteRule people/([^/]+)/projects people-projects.scm?owner-id=$1
    RewriteRule people/([^/]+) people.scm?username=$1
    
  #+END_SRC

  Owning tasks; do pick the responsible owner; time being: assign to
  owner or buyer; assigned to seller, buyer can't change; but
  everybody else can change.

  Everybody can see everything; so don't add the party if you don't
  want them to have visibility.

  Gem: nethttp; otherwise, API consumer.

  =projects/<project-id>/tasks=, PUT to: =tasks/<task-id>= for
  updating.
